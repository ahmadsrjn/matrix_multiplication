<%= form_with url: multiply_path, method: :post, local: true, class: 'container mt-4' do |form| %>
  <div class="mb-4">
    <h1>Enter Matrix Sizes</h1>
    <p class="text-muted">Matrix multiplication is a fundamental operation in linear algebra. It involves multiplying the rows of the first matrix by the columns of the second matrix. For the multiplication to be valid, the number of columns in the first matrix must equal the number of rows in the second matrix.</p>
  </div>
  
  <div class="row mb-3">
    <div class="col-md-6">
      <label for="rows_a" class="form-label">Matrix A: Rows</label>
      <%= number_field_tag :rows_a, nil, id: 'rows_a', class: 'form-control' %>
    </div>
    <div class="col-md-6">
      <label for="cols_a" class="form-label">Columns</label>
      <%= number_field_tag :cols_a, nil, id: 'cols_a', class: 'form-control' %>
    </div>
  </div>

  <div class="row mb-3">
    <div class="col-md-6">
      <label for="rows_b" class="form-label">Matrix B: Rows</label>
      <%= number_field_tag :rows_b, nil, id: 'rows_b', class: 'form-control', readonly: true, style: 'background-color: #adb5bd;' %>
    </div>
    <div class="col-md-6">
      <label for="cols_b" class="form-label">Columns</label>
      <%= number_field_tag :cols_b, nil, id: 'cols_b', class: 'form-control' %>
    </div>
  </div>

  <div class="row">
    <div class="col-md-6 mb-3">
      <h2>Matrix A Values:</h2>
      <div id="matrix_a_values" class="p-2" style="min-height: 100px; overflow-x: auto;"></div>
    </div>
    <div class="col-md-6 mb-3">
      <h2>Matrix B Values:</h2>
      <div id="matrix_b_values" class="p-2" style="min-height: 100px; overflow-x: auto;"></div>
    </div>
  </div>

  <%= form.submit "Calculate Multiplication", class: 'btn btn-primary' %>

  <div class="mt-4">
    <p>After submitting, the matrices entered will be multiplied to produce a result matrix. The elements of the result matrix are computed as the dot product of rows and columns from the input matrices. This operation is key in various applications such as graphics, engineering simulations, and more.</p>
  </div>
<% end %>


<script>
  document.addEventListener('DOMContentLoaded', function() {
    function setupMatrixInputs(matrixId, rowsId, colsId) {
      const rowsInput = document.getElementById(rowsId);
      const colsInput = document.getElementById(colsId);
      const container = document.getElementById(matrixId);

      function updateInputs() {
        const rows = parseInt(rowsInput.value, 10) || 0;
        const cols = parseInt(colsInput.value, 10) || 0;
        container.innerHTML = ''; // Clear existing inputs

        for (let i = 0; i < rows; i++) {
          const rowDiv = document.createElement('div'); // Create a div for each row
          rowDiv.className = 'd-flex'; // Bootstrap class to display flex

          for (let j = 0; j < cols; j++) {
            const input = document.createElement('input');
            input.type = 'number';
            input.name = `${matrixId}[${i}][${j}]`;
            input.required = true;
            input.classList.add('form-control', 'me-2'); // Bootstrap classes for form control and margin-right
            input.style.width = '75px'; // Set a fixed width for each input

            rowDiv.appendChild(input); // Add each input to the row div
          }

          container.appendChild(rowDiv); // Add the complete row div to the container
        }
      }

      rowsInput.addEventListener('change', updateInputs);
      colsInput.addEventListener('change', updateInputs);
    }

    function synchronizeMatrixSize() {
      const colsAInput = document.getElementById('cols_a');
      const rowsBInput = document.getElementById('rows_b');

      colsAInput.addEventListener('change', function() {
        const colsValue = parseInt(colsAInput.value, 10) || 0;
        rowsBInput.value = colsValue; // Set Matrix B Rows equal to Matrix A Columns
        if (colsValue > 0) {
          rowsBInput.dispatchEvent(new Event('change')); // Trigger change event to update inputs
        }
      });
    }

    setupMatrixInputs('matrix_a_values', 'rows_a', 'cols_a');
    setupMatrixInputs('matrix_b_values', 'rows_b', 'cols_b');
    synchronizeMatrixSize();
  });
</script>
